package String;

import java.util.HashSet;

/*
 https://www.geeksforgeeks.org/print-subsequences-string/
 
Print all subsequences of a string

Given a string, we have to find out all subsequences of it. A String is a subsequence of a given String, that is generated by 
deleting some character of a given string without changing its order.

Examples:
Input : abc
Output : a, b, c, ab, bc, ac, abc

Input : aaa
Output : a, aa, aaa

 */

/*
 * approach 1:- Time complexity : O(n^3)

   approach :- Time complexity : O(2^n)

 */
public class _8_String_subsequences 
{
	// Driver code 
    public static void main(String[] args) 
    { 
        String s = "abc"; 
        subsequence(s); 
        System.out.println(st); 
        System.out.println("==========");
        printSubSeq(s);
    } 

    // set to store all the subsequences 
    static HashSet<String> st = new HashSet<>(); 

	
	// It computes all the subsequence of an string 
    static void subsequence(String str) 
    { 
        // iterate over the entire string 
        for (int i = 0; i < str.length(); i++) { 
              
            // iterate from the end of the string 
            // to generate substrings 
            for (int j = str.length(); j > i; j--) { 
                String sub_str = str.substring(i, j); 
              
                if (!st.contains(sub_str)) 
                    st.add(sub_str); 
  
                // drop kth character in the substring 
                // and if its not in the set then recur 
                for (int k = 1; k < sub_str.length() - 1; k++) { 
                    StringBuffer sb = new StringBuffer(sub_str); 
  
                    // drop character from the string 
                    sb.deleteCharAt(k); 
                    if (!st.contains(sb)) 
                        ; 
                    subsequence(sb.toString()); 
                } 
            } 
        } 
    }
    
 // str : Stores input string  
    // n : Length of str.  
    // curr : Stores current permutation  
    // index : Index in current permutation, curr  
    static void printSubSeqRec(String str, int n, int index, String curr)  
    { 
        // base case  
        if (index == n)  
        { 
            return; 
        } 
        System.out.println(curr); 
        for (int i = index + 1; i < n; i++)  
        { 
            curr += str.charAt(i); 
            printSubSeqRec(str, n, i, curr); 
  
            // backtracking  
            curr = curr.substring(0, curr.length() - 1); 
        } 
    } 
  
    // Generates power set in   
    // lexicographic order.  
    static void printSubSeq(String str)  
    { 
        int index = -1; 
        String curr = ""; 
  
        printSubSeqRec(str, str.length(), index, curr); 
    } 
}
